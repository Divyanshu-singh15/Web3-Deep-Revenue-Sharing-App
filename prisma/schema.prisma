// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String  @unique
  password String
  paymailAddress String?
  businesses Business[] // One-to-many relationship with Business
  product Product[]
  salespersons        SalespersonCompany[] @relation("UserSalesperson")
  invitedSalespersons SalespersonCompany[] @relation("InviterSalesperson")
  invitingCode InvitingCode[]
  Earnings Earnings[]
}




model Business {
  id      Int     @id @default(autoincrement())
  name    String
  address String
  phone   String
  type    String
  userId  Int     // Foreign key to User
  user    User    @relation(fields: [userId], references: [id])
  product Product[]
  salespersonCompany SalespersonCompany[]
  invitingCode InvitingCode[]
}

model InvitingCode {
  id      Int     @id @default(autoincrement())
  userId  Int     // Foreign key to User
  user    User    @relation(fields: [userId], references: [id])
  businessId Int
  business Business @relation(fields: [businessId], references: [id])
  inviteCode    String  @unique
  isCompany Boolean @default(false)
  salespersonCompany SalespersonCompany[]
  @@index([userId])
  @@index([businessId])
}


model SalespersonCompany {
  id         Int      @id @default(autoincrement())
  userId     Int      // Foreign key to User
  user       User     @relation("UserSalesperson", fields: [userId], references: [id])
  businessId Int      // Foreign key to Business 
  business   Business @relation(fields: [businessId], references: [id])
  inviterId  Int?     // Foreign key to User as Inviter
  inviter    User?    @relation("InviterSalesperson", fields: [inviterId], references: [id])
  invitingCode InvitingCode? @relation(fields: [invitingCodeId], references: [id])
  invitingCodeId Int?        // Foreign key to InvitingCode
  
  @@index([userId])
  @@index([businessId])
  @@index([inviterId])
}



model Product {
  id      Int     @id @default(autoincrement())
  name    String
  description String
  price   Int
  referalPercent Int?
  businessId    Int
  business Business @relation(fields: [businessId], references: [id])
  userId  Int     // Foreign key to User
  user    User    @relation(fields: [userId], references: [id])
  purchases Purchase[]
}


model Purchase {
  id      Int     @id @default(autoincrement())
  name String
  phone String
  address String
  productId Int
  referrerId Int?
  product Product @relation(fields: [productId], references: [id])
  Earnings Earnings[]
}

model Earnings {
  id           Int      @id @default(autoincrement())
  purchaseId   Int      // Foreign key to Purchase
  purchase     Purchase @relation(fields: [purchaseId], references: [id])
  userId       Int      // Foreign key to User who earned this amount
  user         User     @relation(fields: [userId], references: [id])
  amountEarned Int    // Amount earned by the user for this purchase
  createdAt    DateTime @default(now())
}
